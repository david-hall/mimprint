/* CatProps.java
 *
 * Jim McBeath, July 28, 2004
 */

package jimmc.catprops;

import jimmc.util.StringUtil;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.Arrays;
import java.util.Vector;

/** Concatenate a set of props files into a single properties file.
 * Adds separators and filenames between files, and converts
 * non-ascii characters to backslash-u notation.
 */
public class CatProps {
    public CatProps(){}

    public static void main(String[] args) {
	int status = (new CatProps()).doMain(args);
	System.exit(status);
    }

    /** The program.
     * @param args Command line arguments and input filenames.
     * @return Exit status: 0 if no problems, nonzero on error.
     */
    public int doMain(String[] args) {
	String lang = null;
	int n;
	Vector fileV = new Vector();
	for (n=0; n<args.length; n++) {
	    if (args[n].equalsIgnoreCase("-lang")) {
		lang = args[++n];
	    }
	    else if (args[n].equalsIgnoreCase("-sourcepath")) {
		String sp = args[++n];	//list of source files as a path
		String[] ff = StringUtil.toArray(sp,File.pathSeparatorChar);
		for (int i=0; i<ff.length; i++) {
		    fileV.addElement(ff[i]);	//add all files to the list
		}
	    }
	    else if (args[n].startsWith("-")) {
		//An unknown command line argument
		System.err.println("Unknown command line option "+args[n]);
		return 1;
	    } else {
		//A filename, add it to the list
		fileV.addElement(args[n]);
	    }
	}

	String[] filenames = new String[fileV.size()];
	fileV.copyInto(filenames);
	Arrays.sort(filenames);
	String ulang = (lang==null)?"":"_"+lang;
	println("#This file is automatically generated from the *"
		+ulang+".props files.");
	println("#Edits made directly to this file will be lost on the next biuld.");
	for (int f=0; f<filenames.length; f++) {
	    if (processInputFile(filenames[f])!=0) {
		System.err.println("Processing aborted");
		return 1;
	    }
	}
	return 0;
    }

    /** Process one props file.
     * @return 0 if OK, nonzero on error
     */
    private int processInputFile(String filename) {
	String s = readInputFile(filename);
	if (s==null)
	    return 1;
	writeOutputFile(filename,s);
	return 0;
    }

    /** Read one input file.
     * @param filename The name of the file to read.
     * @return A string with the contents of the file.
     */
    private String readInputFile(String filename) {
	String[] encodings = { "UTF-8", "ISO-8859-1" };
	for (int i=0; i<encodings.length; i++) {
//System.err.println("Trying encoding "+encodings[i]+" for file "+filename);
	    String contents = readInputFile(filename,encodings[i]);
	    if (contents==null)
		return null;
	    if (stringIsValid(contents)) {
//System.err.println("Encoding "+encodings[i]+" worked");
		return contents;
	    }
//System.err.println("Encoding "+encodings[i]+" failed");
	}

	throw new RuntimeException("Can't decode input file");
    }

    /** Read in a file in a specified encoding.
     */
    private String readInputFile(String filename, String encoding) {
	Reader in=null;
	try {
	    FileInputStream fis = new FileInputStream(filename);
	    in = new InputStreamReader(fis,encoding);
	} catch (Exception ex) {
	    System.err.println("Error opening input file \""+filename+
		    "\": "+ex.getClass().getName()+": "+ex.getMessage());
	    return null;
	}
	try {
	    StringBuffer sb = new StringBuffer();
	    int c;
	    //Process the input one character at a time
	    while ((c=in.read())!=-1) {
		if (c<0) {
//System.err.println("From file "+filename+" encoding "+encoding+" got char "+c);
		}
		sb.append((char)c);
	    }
	    in.close();
	    return sb.toString();
	} catch (Exception ex) {
	    System.err.println("Error reading input file \""+filename+
		    "\": "+ex.getClass().getName()+": "+ex.getMessage());
	    return null;
	}
    }

    /** See if a string is valid.
     * If we read the file in the wrong encoding, we expect to get some
     * "bad" characters.
     */
    private boolean stringIsValid(String s) {
	int len = s.length();
	for (int i=0; i<len; i++) {
	    int c = s.charAt(i);
	    if (c==0xFFFD)
		return false;
	}
	return true;
    }

    private void writeOutputFile(String filename, String contents) {
	printSeparator();
	println("#File: "+filename);
	int len = contents.length();
	for (int i=0; i<len; i++) {
	    int c = contents.charAt(i);
	    if (c>0 && c<128) {
		//valid ASCII character, including control chars
		print((char)c);
	    } else {
		//Print it out in backslash-u notation
		print("\\u");
		print(Character.forDigit((c>>12)&0xF,16));
		print(Character.forDigit((c>> 8)&0xF,16));
		print(Character.forDigit((c>> 4)&0xF,16));
		print(Character.forDigit((c>> 0)&0xF,16));
	    }
	}
    }

    /** Print a separator between the input files */
    private void printSeparator() {
	println("\n#------------------------------------------------------");
    }

    /** Print a line of text to our output. */
    private void println(String text) {
	System.out.println(text);	//our output is stdout
    }

    private void print(String s) {
	System.out.print(s);
    }

    private void print(char c) {
	System.out.print(c);
    }
}
