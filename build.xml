<project name="mimprint" default="jar">

    <target name="init">
        <property file="build.properties"/>
        <property file="VERSION"/>

        <property name="rel.subdir" value="${version.name}-${version.numberU}"/>
        <property name="rel.dir" value="${release.dir}/${rel.subdir}" />
        <property name="rel.jar" value="${rel.subdir}.jar" />

        <property name="relbin.files"
                value="README README.html VERSION LICENSE COPYRIGHT HISTORY"/>
	<property name="jarinst.files"
		value="${src.dir}/jarinst/*.c ${src.dir}/jarinst/*.ini
			${src.dir}/jarinst/*.inf ${src.dir}/jarinst/*.bat"/>

	<property name="jshortcut.dir"
		value="${u-j-releases}/jshortcut/v${jshortcut.version}"/>
	<property name="jshortcut.jar" value="${jshortcut.dir}/jshortcut.jar"/>
	<property name="jshortcut.dll" value="${jshortcut.dir}/jshortcut.dll"/>

        <!-- The classpath for compiling our java classes. -->
        <path id="compile.classpath">
            <pathelement location="${class.dir}"/>
	    <pathelement location="${jshortcut.jar}"/>
        </path>

        <!-- The classpath for creating our javadoc docs. -->
	<path id="javadoc.classpath">
	    <path refid="compile.classpath"/>
	</path>
    </target>

    <target name="mkdirs" depends="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${class.dir}"/>
        <mkdir dir="${release.dir}"/>
    </target>

    <target name="compile" depends="init,mkdirs">
        <javac
            srcdir="${src.dir}"
            destdir="${class.dir}"
            debug="${javac.debug}"
            classpathref="compile.classpath"
            source="1.4"
        >
            <include name="**/*.java"/>
	    <exclude name="*/*.old/*.java"/>
        </javac>
    </target>

    <!-- Create the default properties file from all of the props files -->
    <target name="properties-default"
	    depends="init,check-properties-default,concat-properties-default"/>

    <!-- See if the properties file is up to date -->
    <target name="check-properties-default">
        <uptodate property="properties-default-uptodate"
		targetfile="${resources.properties}"
        >
	    <srcfiles dir="${src.dir}"
		    includes="**/*.props"
		    excludes="**/*_*.props"
	    />
	    <srcfiles dir="${src.dir}"
		    includes="net/jimmc/catprops/*.java"
	    />
	    <srcfiles dir="." includes="build.xml" />
	</uptodate>
    </target>

    <!-- Create the properties file if it is not up to date. -->
    <target name="concat-properties-default"
    		unless="properties-default-uptodate">
	<path id="prop-file-path">
	    <fileset dir="${src.dir}">
	    	<include name="**/*.props"/>
	    	<exclude name="**/*_*.props"/>
	    </fileset>
	</path>
	<property name="prop-files" refid="prop-file-path"/>
	<java	classname="net/jimmc/catprops/CatProps"
		classpath="${class.dir}"
		output="${resources.properties}.tmp"
		fork="true"
		failonerror="true"
	>
	    <arg value="-sourcepath"/>
	    <arg line="${prop-files}"/>
	</java>
	<!-- Now that the props have been collected, replace the VERSION
	     and VDATE strings. -->
	<copy file="${resources.properties}.tmp"
		tofile="${resources.properties}">
	    <filterset begintoken="%" endtoken="%">
	        <filter token="VERSION" value="v${version.number}"/>
	        <filter token="VDATE" value="${version.date}"/>
	    </filterset>
	</copy>
	<delete file="${resources.properties}.tmp"/>
    </target>

    <target name="jar" depends="compile,properties-default"
            description="Build the application">
        <!-- Start by creating the jar file with all our classes. -->
        <jar
            jarfile="${mimprint.jar}"
            basedir="${class.dir}"
        >
            <manifest>
                <attribute name="Main-class" value="${main.class}"/>
		<attribute name="Class-Path"
			value="jRegistryKey.jar jshortcut.jar"/>
            </manifest>
        </jar>
        <!-- Now add the image files from the source directory. -->
        <zip
            destfile="${mimprint.jar}"
            basedir="${src.dir}"
            update="true"
            includes="**/*.gif"
        />
    </target>

    <target name="clean" depends="init"
            description="Remove all generated files">
        <delete dir="${build.dir}"/>
        <delete file="${mimprint.jar}"/>
    </target>

    <!-- Make the documentation -->
    <target name="doc" depends="apidoc"
    		description="Compile all the documentation"/>

    <target name="apidoc" depends="init"
    		description="Create the javadoc documentation">
        <uptodate targetfile="${apidoc.dir}/index.html"
		property="apidoc-uptodate">
	    <srcfiles dir="${src.dir}"
	    	includes="**/*.java"
		excludes="**/*.old/**/*.java"/>
	</uptodate>
	<antcall target="create-apidoc"/>
    </target>

    <target name="create-apidoc" depends="init" unless="apidoc-uptodate">
        <mkdir dir="${apidoc.dir}"/>
	<javadoc
		sourcepath="${src.dir}"
		destdir="${apidoc.dir}"
		overview="${overview.html}"
		classpathref="javadoc.classpath"
	>
	    <fileset dir="${src.dir}">
	    	<include name="**/*.java"/>
	    	<exclude name="**/*.old/**/*.java"/>
	    </fileset>
	</javadoc>
    </target>

    <target name="all" depends="jar,doc"
    		description="Build all files for release"/>

    <target name="arch" depends="init"
    		description="Copy the reljar and README files to the Arch dir">
	<property name="arch.version.dir"
		value="${arch.dir}/v${version.number}"/>
        <mkdir dir="${arch.version.dir}"/>
        <copy file="${rel.jar}"
		tofile="${arch.version.dir}/${rel.jar}"
		preservelastmodified="true"/>
        <copy file="README.html"
		tofile="${arch.version.dir}/README-${version.numberU}.html"
		preservelastmodified="true"/>
        <chmod dir="${arch.version.dir}" includes="*" perm="-w"/>
    </target>

    <target name="cvstag" depends="init"
    		description="Tag all files in CVS for the current release">
	<echo message="Tagging files as ${version.name}-${version.numberU}"/>
        <cvs command="tag ${version.name}-${version.numberU}"/>
    </target>

    <target name="rel" depends="relbin,relsrc,relapidoc"
    		description="Create the release directory"/>

    <target name="relbin" depends="init">
        <mkdir dir="${rel.dir}"/>
	<copy todir="${rel.dir}" flatten="true" preservelastmodified="true">
	    <fileset dir="." includes="${relbin.files}"/>
	</copy>
	<copy todir="${rel.dir}" file="${mimprint.jar}"
		preservelastmodified="true"/>
	<copy todir="${rel.dir}" file="${jshortcut.jar}"
		preservelastmodified="true"/>
	<copy todir="${rel.dir}" file="${jshortcut.dll}"
		preservelastmodified="true"/>
        <!-- Don't copy in the api doc, we deliver it in apidoc.zip ...
	<copy todir="${rel.dir}/doc/api" preservelastmodified="true">
	    <fileset dir="${apidoc.dir}" includes="*"/>
	</copy>
        -->
	<copy todir="${rel.dir}/templates" preservelastmodified="true">
	    <fileset dir="${templates.dir}" includes="**/*.mmp"/>
	</copy>
    </target>

    <target name="relsrc" depends="init">
        <property name="relsrc.includes"
                  value="README.build build.xml build.properties
			${jarinst.files}
			${src.dir}/**/*.java ${src.dir}/**/*.props
			${src.dir}/**/*.html ${src.dir}/**/*.mf" />
        <zip basedir="." destfile="${rel.dir}/src.zip"
		includes="${relsrc.includes}"
		excludes="**/*.old/**/*.*"
	/>
    </target>

    <target name="relapidoc" depends="init">
        <zip basedir="." destfile="${rel.dir}/apidoc.zip"
		includes="${apidoc.dir}/**/*"
	/>
    </target>

    <!-- Make the release jar file from the release directory -->
    <target name="reljar" depends="init"
	    description=
	        "Create the distributable jar file from the release directory">
	<!-- Start by creating a jar file with the release directory files -->
        <jar basedir="${release.dir}" jarfile="${rel.jar}"
                includes="${rel.subdir}/**">
	    <manifest>
	        <attribute name="Main-class"
                        value="net.jimmc.selfunzip.ZipSelfExtractor"/>
	    </manifest>
	</jar>
        <zip basedir="${class.dir}" destfile="${rel.jar}"
		includes="net/jimmc/selfunzip/ZipSelfExtractor*.class"
		update="true"
	/>
	<!-- Add the shortcut class for installing on windows. -->
        <zip destfile="${rel.jar}" update="true">
	    <zipfileset src="${jshortcut.jar}"
		    includes="net/jimmc/jshortcut/JShellLink.class"/>
	</zip>
    </target>

</project>
